c380c67ef4c888cd469ff3ae8febae60
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
module.exports = function (moduleName, instanceMethods, isESModule) {
  var _Class;
  var RealComponent = isESModule ? jest.requireActual(moduleName)["default"] : jest.requireActual(moduleName);
  var React = require('react');
  var SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
  var name = RealComponent.displayName || RealComponent.name || (RealComponent.render // handle React.forwardRef
  ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  var nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  var Component = (_Class = /*#__PURE__*/function (_SuperClass) {
    function Component() {
      _classCallCheck(this, Component);
      return _callSuper(this, Component, arguments);
    }
    _inherits(Component, _SuperClass);
    return _createClass(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var props = Object.assign({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            // We can't just assign props on top of defaultProps
            // because React treats undefined as special and different from null.
            // If a prop is specified but set to undefined it is ignored and the
            // default prop is used instead. If it is set to null, then the
            // null value overwrites the default value.
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return React.createElement(nameWithoutPrefix, props, this.props.children);
      }
    }]);
  }(SuperClass), _defineProperty(_Class, "displayName", 'Component'), _Class);
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJhIiwibiIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZSIsInIiLCJ0IiwibGVuZ3RoIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIl9jYWxsU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXBwbHkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJCb29sZWFuIiwidmFsdWVPZiIsImNhbGwiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiYmluZCIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImNyZWF0ZSIsInZhbHVlIiwiX3NldFByb3RvdHlwZU9mIiwiX2RlZmluZVByb3BlcnR5IiwiaSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiU3RyaW5nIiwiTnVtYmVyIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZU5hbWUiLCJpbnN0YW5jZU1ldGhvZHMiLCJpc0VTTW9kdWxlIiwiX0NsYXNzIiwiUmVhbENvbXBvbmVudCIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiUmVhY3QiLCJyZXF1aXJlIiwiU3VwZXJDbGFzcyIsIkNvbXBvbmVudCIsIm5hbWUiLCJkaXNwbGF5TmFtZSIsInJlbmRlciIsIm5hbWVXaXRob3V0UHJlZml4IiwicmVwbGFjZSIsIl9TdXBlckNsYXNzIiwiYXJndW1lbnRzIiwiX3RoaXMiLCJwcm9wcyIsImFzc2lnbiIsImRlZmF1bHRQcm9wcyIsImtleXMiLCJmb3JFYWNoIiwicHJvcCIsInVuZGVmaW5lZCIsImNyZWF0ZUVsZW1lbnQiLCJjaGlsZHJlbiIsImNsYXNzU3RhdGljIl0sInNvdXJjZXMiOlsibW9ja0NvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAobW9kdWxlTmFtZSwgaW5zdGFuY2VNZXRob2RzLCBpc0VTTW9kdWxlKSA9PiB7XG4gIGNvbnN0IFJlYWxDb21wb25lbnQgPSBpc0VTTW9kdWxlXG4gICAgPyBqZXN0LnJlcXVpcmVBY3R1YWwobW9kdWxlTmFtZSkuZGVmYXVsdFxuICAgIDogamVzdC5yZXF1aXJlQWN0dWFsKG1vZHVsZU5hbWUpO1xuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbiAgY29uc3QgU3VwZXJDbGFzcyA9XG4gICAgdHlwZW9mIFJlYWxDb21wb25lbnQgPT09ICdmdW5jdGlvbicgPyBSZWFsQ29tcG9uZW50IDogUmVhY3QuQ29tcG9uZW50O1xuXG4gIGNvbnN0IG5hbWUgPVxuICAgIFJlYWxDb21wb25lbnQuZGlzcGxheU5hbWUgfHxcbiAgICBSZWFsQ29tcG9uZW50Lm5hbWUgfHxcbiAgICAoUmVhbENvbXBvbmVudC5yZW5kZXIgLy8gaGFuZGxlIFJlYWN0LmZvcndhcmRSZWZcbiAgICAgID8gUmVhbENvbXBvbmVudC5yZW5kZXIuZGlzcGxheU5hbWUgfHwgUmVhbENvbXBvbmVudC5yZW5kZXIubmFtZVxuICAgICAgOiAnVW5rbm93bicpO1xuXG4gIGNvbnN0IG5hbWVXaXRob3V0UHJlZml4ID0gbmFtZS5yZXBsYWNlKC9eKFJDVHxSSykvLCAnJyk7XG5cbiAgY29uc3QgQ29tcG9uZW50ID0gY2xhc3MgZXh0ZW5kcyBTdXBlckNsYXNzIHtcbiAgICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQ29tcG9uZW50JztcblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgUmVhbENvbXBvbmVudC5kZWZhdWx0UHJvcHMpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcykge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIC8vIFdlIGNhbid0IGp1c3QgYXNzaWduIHByb3BzIG9uIHRvcCBvZiBkZWZhdWx0UHJvcHNcbiAgICAgICAgICAvLyBiZWNhdXNlIFJlYWN0IHRyZWF0cyB1bmRlZmluZWQgYXMgc3BlY2lhbCBhbmQgZGlmZmVyZW50IGZyb20gbnVsbC5cbiAgICAgICAgICAvLyBJZiBhIHByb3AgaXMgc3BlY2lmaWVkIGJ1dCBzZXQgdG8gdW5kZWZpbmVkIGl0IGlzIGlnbm9yZWQgYW5kIHRoZVxuICAgICAgICAgIC8vIGRlZmF1bHQgcHJvcCBpcyB1c2VkIGluc3RlYWQuIElmIGl0IGlzIHNldCB0byBudWxsLCB0aGVuIHRoZVxuICAgICAgICAgIC8vIG51bGwgdmFsdWUgb3ZlcndyaXRlcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wXSA9IHRoaXMucHJvcHNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQobmFtZVdpdGhvdXRQcmVmaXgsIHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH07XG5cbiAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gbmFtZVdpdGhvdXRQcmVmaXg7XG5cbiAgT2JqZWN0LmtleXMoUmVhbENvbXBvbmVudCkuZm9yRWFjaChjbGFzc1N0YXRpYyA9PiB7XG4gICAgQ29tcG9uZW50W2NsYXNzU3RhdGljXSA9IFJlYWxDb21wb25lbnRbY2xhc3NTdGF0aWNdO1xuICB9KTtcblxuICBpZiAoaW5zdGFuY2VNZXRob2RzICE9IG51bGwpIHtcbiAgICBPYmplY3QuYXNzaWduKENvbXBvbmVudC5wcm90b3R5cGUsIGluc3RhbmNlTWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUFDLFNBQUFBLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBQUEsU0FBQUssZ0JBQUFDLENBQUEsRUFBQUMsQ0FBQSxVQUFBRCxDQUFBLFlBQUFDLENBQUEsYUFBQUMsU0FBQTtBQUFBLFNBQUFDLGtCQUFBQyxDQUFBLEVBQUFDLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELENBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFaLENBQUEsR0FBQVcsQ0FBQSxDQUFBQyxDQUFBLEdBQUFaLENBQUEsQ0FBQWMsVUFBQSxHQUFBZCxDQUFBLENBQUFjLFVBQUEsUUFBQWQsQ0FBQSxDQUFBZSxZQUFBLGtCQUFBZixDQUFBLEtBQUFBLENBQUEsQ0FBQWdCLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxj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