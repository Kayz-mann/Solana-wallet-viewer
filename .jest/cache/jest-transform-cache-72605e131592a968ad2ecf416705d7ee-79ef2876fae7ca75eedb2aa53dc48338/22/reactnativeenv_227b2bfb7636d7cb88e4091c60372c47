7fe3ac06a98d2b7bde0136fd18fb8534
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var NodeEnv = require('jest-environment-node').TestEnvironment;
module.exports = /*#__PURE__*/function (_NodeEnv) {
  function ReactNativeEnv() {
    var _this;
    _classCallCheck(this, ReactNativeEnv);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ReactNativeEnv, [].concat(args));
    _defineProperty(_this, "customExportConditions", ['require', 'react-native']);
    return _this;
  }
  _inherits(ReactNativeEnv, _NodeEnv);
  return _createClass(ReactNativeEnv);
}(NodeEnv);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfZGVmaW5lUHJvcGVydGllcyIsImUiLCJyIiwidCIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJfY2xhc3NDYWxsQ2hlY2siLCJhIiwibiIsIlR5cGVFcnJvciIsIl9jYWxsU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXBwbHkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJCb29sZWFuIiwidmFsdWVPZiIsImNhbGwiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiYmluZCIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImNyZWF0ZSIsInZhbHVlIiwiX3NldFByb3RvdHlwZU9mIiwiX2RlZmluZVByb3BlcnR5IiwiaSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiU3RyaW5nIiwiTnVtYmVyIiwiTm9kZUVudiIsInJlcXVpcmUiLCJUZXN0RW52aXJvbm1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiX05vZGVFbnYiLCJSZWFjdE5hdGl2ZUVudiIsIl90aGlzIiwiX2xlbiIsImFyZ3VtZW50cyIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiXSwic291cmNlcyI6WyJyZWFjdC1uYXRpdmUtZW52LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBOb2RlRW52ID0gcmVxdWlyZSgnamVzdC1lbnZpcm9ubWVudC1ub2RlJykuVGVzdEVudmlyb25tZW50O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFJlYWN0TmF0aXZlRW52IGV4dGVuZHMgTm9kZUVudiB7XG4gIGN1c3RvbUV4cG9ydENvbmRpdGlvbnMgPSBbJ3JlcXVpcmUnLCAncmVhY3QtbmF0aXZlJ107XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7O0FBQUMsU0FBQUEsUUFBQUMsQ0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLENBQUEsa0JBQUFBLENBQUEsZ0JBQUFBLENBQUEsV0FBQUEsQ0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosQ0FBQSxLQUFBRCxPQUFBLENBQUFDLENBQUE7QUFBQSxTQUFBSyxrQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBUixDQUFBLEdBQUFPLENBQUEsQ0FBQUMsQ0FBQSxHQUFBUixDQUFBLENBQUFVLFVBQUEsR0FBQVYsQ0FBQSxDQUFBVSxVQUFBLFFBQUFWLENBQUEsQ0FBQVcsWUFBQSxrQkFBQVgsQ0FBQSxLQUFBQSxDQUFBLENBQUFZLFFBQUEsUUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFSLENBQUEsRUFBQVMsY0FBQSxDQUFB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